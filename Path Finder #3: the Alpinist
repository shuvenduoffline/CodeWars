/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <string>
#include <iostream>
#include <bits/stdc++.h>
#include <cstdlib>
#include <cmath>
using namespace std;
#include <vector>
#define PB push_back

vector < vector < int >> visit;

bool isvalid(pair<int,int> p,int n){
    if (p.first < 0 || p.first >= n || p.second >= n || p.second < 0)
        return false;
    else return true;
}

int get_min_climb (pair < int, int >p, vector < vector < int >> mat, int n, int jump)
{
// cout<<"P "<<p.first<<p.second<<"  N"<<n<<"Jum "<<jump<<endl;
  if (p.first == n - 1 && p.second == n - 1)
    return abs(jump - mat[p.first][p.second]);

if(!isvalid(p,n)) return INT_MAX-3000000;
    
if (visit[p.first][p.second] > -1 )
return visit[p.first][p.second]+abs(jump - mat[p.first][p.second]);
else if(visit[p.first][p.second] < -1) return INT_MAX-300000;

    
         for (int i = 0; i < n; i++)
    {
      for (int j = 0; j < n; j++)
	{
	  /* code */
	  cout << visit[i][j] << " ";
	}
      cout << endl;
    }
  cout<<endl;
    

visit[p.first][p.second] = -2;

  int mm = INT_MAX-300000,val=0;
  pair < int, int >pp (p.first+1, p.second);
  if(isvalid(pp,n)){
      mm = min (mm, get_min_climb (pp, mat, n,mat[p.first][p.second]));
  }
 
  pp.first = p.first;
  pp.second = p.second+1;
  if(isvalid(pp,n)){
    mm = min (mm, get_min_climb (pp, mat, n,mat[p.first][p.second]));
  }

//   pp.first = p.first;
//   pp.second = p.second-1;
//   if(isvalid(pp,n)){
//     mm = min (mm, get_min_climb (pp, mat, n,mat[p.first][p.second]));
//   }
  
//   pp.first = p.first-1;
//   pp.second = p.second;
//   if(isvalid(pp,n)){
//     mm = min (mm, get_min_climb (pp, mat, n,mat[p.first][p.second]));
//   }


  visit[p.first][p.second] = mm;
  return mm + abs(jump - mat[p.first][p.second]);

}

int
path_finder (std::string maze)
{
  
 vector <int>te;
 vector<vector<int>> mat;
for(auto i : maze){
    if (i == '\n') {
        mat.PB(te);
        te.clear();
    }else{
        te.PB(i-'0');
    }
}
mat.PB(te);
int len = mat.size();

     for (int i = 0; i < len; i++)
    {
      for (int j = 0; j < len; j++)
	{
	  /* code */
	  cout << mat[i][j] << " ";
	}
      cout << endl;
    }
  cout<<endl;

  pair < int, int >p (0, 0);
  vector < vector < int >>vec (len, vector < int >(len, -1));
  visit = vec;
  return get_min_climb (p, mat, len, mat[0][0]);
}

int
main ()
{
 std::string s1 = 
// "000000\n"
// "000000\n"
// "000000\n"
// "000010\n"
// "000109\n"
// "001010";	
 

// "181573956322179 0\n"
// "5 1 3 3 5 3 9 1 3 6 9 3 4 9 4 8\n"
// "9 5 3 8 8 2 4 6 7 8 8 1 5 0 3 3\n"
// "1 9 6 8 2 8 0 6 6 1 9 2 2 3 0 2\n"
// "0 6 0 0 0 6 6 8 4 5 1 0 7 4 3 0\n"
// "3 1 0 6 9 0 4 5 2 5 0 6 1 0 8 1\n"
// "6 1 2 7 9 8 7 4 5 8 6 2 2 1 4 6\n"
// "2 5 4 4 7 8 1 9 3 1 8 4 2 6 8 0\n"
// "9 0 7 9 0 4 5 8 4 3 2 7 6 7 5 0\n"
// "2 9 4 9 9 8 1 4 9 9 1 3 7 9 4 9\n"
// "1 3 0 3 0 7 1 4 0 4 3 8 3 8 8 5\n"
// "9 3 6 0 3 9 5 2 0 8 8 0 9 4 9 0\n"
// "7 9 3 9 8 7 6 0 1 9 8 4 0 6 1 1\n"
// "1 9 2 4 9 9 7 1 7 7 1 6 1 0 8 8\n"
// "1 3 0 9 0 6 9 3 5 7 9 7 6 2 9 7\n"
// "2 3 2 3 2 1 4 1 8 6 9 9 8 9 9 2";


"2867707812718\n"
"4083083330637\n"
"5618248017085\n"
"1035195145090\n"
"5961927029630\n"
"8028641994865\n"
"2172333944335\n"
"6211411729330\n"
"2988631474925\n"
"5798272507916\n"
"1396335431767\n"
"6268715899745\n"
"7141974039303";

cout<<path_finder(s1);

//   string s = "Random string";
//   cout << s.substr (1) << '\n';
//   cout << s.replace (0, 1, "") << '\n';



  // empty initializer list
// vector < vector < int >>mat (M, vector < int >(N, -1));
//   for (int i = 0; i < M; i++)
//     {
//       for (int j = 0; j < N; j++)
// 	{
// 	  /* code */
// 	  cout << mat[i][j] << " ";
// 	}
//       cout << endl;
//     }



  return 0;
}
